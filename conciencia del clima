import pygame
import sys
import random

# Inicializar Pygame
pygame.init()

# Configurar la pantalla
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("THE WORLD OF TREES")

# Cargar las imágenes de fondo
background_image = pygame.image.load("fondo feo.png.png")
background_image = pygame.transform.scale(background_image, (WIDTH, HEIGHT))

menu_background_image = pygame.image.load("fondo de menu.jpeg.png")
menu_background_image = pygame.transform.scale(menu_background_image, (WIDTH, HEIGHT))  # Ajustar tamaño al de la pantalla

# Reloj para controlar FPS
clock = pygame.time.Clock()

# Colores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

# Velocidad del jugador
player_speed = 5

# Clase para el jugador
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("assets//images//characters//player//pixilart-sprite.png")
        self.rect = self.image.get_rect()
        self.rect.x = WIDTH // 2
        self.rect.y = HEIGHT - 60  # En el suelo
        self.health = 100  # Salud inicial

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.image = pygame.image.load("assets//images//characters//player//pixilart-sprite3.png")
            self.rect.x -= player_speed
        if keys[pygame.K_RIGHT]:
            self.image = pygame.image.load("assets//images//characters//player//pixilart-sprite2.png")
            self.rect.x += player_speed

        # Limitar movimiento del jugador
        self.rect.x = max(0, min(self.rect.x, WIDTH - self.rect.width))

# Clase para las llantas
class Tire(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("llantas 2.png").convert_alpha()  # Cargar la imagen de la llanta
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, WIDTH - 30)
        self.rect.y = random.randint(-100, -30)

    def update(self):
        self.rect.y += 5  # Velocidad de caída de las llantas
        if self.rect.y > HEIGHT:
            self.rect.y = random.randint(-100, -30)
            self.rect.x = random.randint(0, WIDTH - 30)

# Clase para las gotas de agua
class WaterDrop(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("gota.png").convert_alpha()  # Cargar la imagen de la gota de agua
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, WIDTH - 30)
        self.rect.y = random.randint(-100, -30)

    def update(self):
        self.rect.y += 10  # Velocidad de caída de la gota de agua
        if self.rect.y > HEIGHT:
            self.kill()  # Eliminar la gota si se sale de la pantalla

        # Generar gotas de agua
        if random.randint(1, 100) == 0.005:  # Cambia la frecuencia de generación según necesites
            water_drop = WaterDrop()
            water_drops.add(water_drop)


# Crear grupos de sprites
player = Player()
tires = pygame.sprite.Group()
water_drops = pygame.sprite.Group()  # Grupo para las gotas de agua

# Función para añadir llantas
def create_tires(level):
    tire_count = 5 if level == 'easy' else 10
    for _ in range(tire_count):
        tire = Tire()
        tires.add(tire)

# Temporizador
start_ticks = pygame.time.get_ticks()  # Obtener el tiempo de inicio
time_limit = 60  # Tiempo límite en segundos

# Función para dibujar la barra de vida
def draw_health_bar(screen, x, y, current_health, max_health):
    health_percentage = current_health / max_health
    bar_width = 200
    bar_height = 20

    # Fondo de la barra
    pygame.draw.rect(screen, RED, (x, y, bar_width, bar_height))
    # Parte de la barra que representa la salud actual
    pygame.draw.rect(screen, GREEN, (x, y, bar_width * health_percentage, bar_height))

# Función para mostrar la pantalla inicial
def show_main_menu():
    screen.blit(menu_background_image, (0, 0))  # Dibujar el fondo del menú
    font = pygame.font.Font(None, 74)
    title_text = font.render("THE WORLD OF TREES", True, WHITE)
    screen.blit(title_text, (WIDTH // 2 - title_text.get_width() // 2, HEIGHT // 4))

    play_button = font.render("Jugar", True, WHITE)
    options_button = font.render("Opciones", True, WHITE)
    exit_button = font.render("Salir", True, WHITE)

    screen.blit(play_button, (WIDTH // 2 - play_button.get_width() // 2, HEIGHT // 2))
    screen.blit(options_button, (WIDTH // 2 - options_button.get_width() // 2, HEIGHT // 2 + 50))
    screen.blit(exit_button, (WIDTH // 2 - exit_button.get_width() // 2, HEIGHT // 2 + 100))

    pygame.display.flip()

    return play_button.get_rect(topleft=(WIDTH // 2 - play_button.get_width() // 2, HEIGHT // 2)), \
           options_button.get_rect(topleft=(WIDTH // 2 - options_button.get_width() // 2, HEIGHT // 2 + 50)), \
           exit_button.get_rect(topleft=(WIDTH // 2 - exit_button.get_width() // 2, HEIGHT // 2 + 100))

# Función para mostrar la selección de dificultad
def show_difficulty_selection():
    screen.fill(BLACK)
    font = pygame.font.Font(None, 74)
    title_text = font.render("Selecciona Dificultad", True, WHITE)
    screen.blit(title_text, (WIDTH // 2 - title_text.get_width() // 2, HEIGHT // 4))

    easy_button = font.render("Principiante", True, WHITE)
    hard_button = font.render("Avanzado", True, WHITE)

    screen.blit(easy_button, (WIDTH // 2 - easy_button.get_width() // 2, HEIGHT // 2))
    screen.blit(hard_button, (WIDTH // 2 - hard_button.get_width() // 2, HEIGHT // 2 + 50))

    pygame.display.flip()

    return easy_button.get_rect(topleft=(WIDTH // 2 - easy_button.get_width() // 2, HEIGHT // 2)), \
           hard_button.get_rect(topleft=(WIDTH // 2 - hard_button.get_width() // 2, HEIGHT // 2 + 50))

# Función para mostrar niveles
def show_level_selection():
    screen.fill(BLACK)
    font = pygame.font.Font(None, 74)
    title_text = font.render("Selecciona Nivel", True, WHITE)
    screen.blit(title_text, (WIDTH // 2 - title_text.get_width() // 2, HEIGHT // 4))

    level1_button = font.render("Nivel 1", True, WHITE)
    level2_button = font.render("Nivel 2", True, WHITE)
    level3_button = font.render("Nivel 3", True, WHITE)

    screen.blit(level1_button, (WIDTH // 2 - level1_button.get_width() // 2, HEIGHT // 2))
    screen.blit(level2_button, (WIDTH // 2 - level2_button.get_width() // 2, HEIGHT // 2 + 50))
    screen.blit(level3_button, (WIDTH // 2 - level3_button.get_width() // 2, HEIGHT // 2 + 100))

    pygame.display.flip()

    return level1_button.get_rect(topleft=(WIDTH // 2 - level1_button.get_width() // 2, HEIGHT // 2)), \
           level2_button.get_rect(topleft=(WIDTH // 2 - level2_button.get_width() // 2, HEIGHT // 2 + 50)), \
           level3_button.get_rect(topleft=(WIDTH // 2 - level3_button.get_width() // 2, HEIGHT // 2 + 100))

# Función para mostrar la pantalla de controles
def show_controls():
    screen.fill(BLACK)
    font = pygame.font.Font(None, 48)
    controls_text = font.render("Controles:", True, WHITE)
    screen.blit(controls_text, (WIDTH // 2 - controls_text.get_width() // 2, HEIGHT // 4))

    movement_text = font.render("Izquierda: ←   Derecha: →", True, WHITE)
    screen.blit(movement_text, (WIDTH // 2 - movement_text.get_width() // 2, HEIGHT // 2))

    back_button = font.render("Volver", True, WHITE)
    screen.blit(back_button, (WIDTH // 2 - back_button.get_width() // 2, HEIGHT // 2 + 50))

    pygame.display.flip()

    return back_button.get_rect(topleft=(WIDTH // 2 - back_button.get_width() // 2, HEIGHT // 2 + 50))

# Función para mostrar la pantalla de ajustes
def show_options():
    screen.fill(BLACK)
    font = pygame.font.Font(None, 48)
    options_text = font.render("Opciones:", True, WHITE)
    screen.blit(options_text, (WIDTH // 2 - options_text.get_width() // 2, HEIGHT // 4))

    design_text = font.render("Aquí puedes añadir diseño...", True, WHITE)
    screen.blit(design_text, (WIDTH // 2 - design_text.get_width() // 2, HEIGHT // 2))

    back_button = font.render("Volver", True, WHITE)
    screen.blit(back_button, (WIDTH // 2 - back_button.get_width() // 2, HEIGHT // 2 + 50))

    pygame.display.flip()

    return back_button.get_rect(topleft=(WIDTH // 2 - back_button.get_width() // 2, HEIGHT // 2 + 50))

# Función para mostrar la pantalla de Juego Terminado
def show_game_over():
    screen.fill(BLACK)
    font = pygame.font.Font(None, 74)
    game_over_text = font.render("¡Game Over!", True, RED)
    screen.blit(game_over_text,
                (WIDTH // 2 - game_over_text.get_width() // 2, HEIGHT // 2 - game_over_text.get_height() // 2))

    # Crear botones para reiniciar y volver al menú
    restart_button = font.render("Reiniciar", True, WHITE)
    menu_button = font.render("Menu", True, WHITE)
    screen.blit(restart_button, (WIDTH // 2 - restart_button.get_width() // 2, HEIGHT // 2 + 50))
    screen.blit(menu_button, (WIDTH // 2 - menu_button.get_width() // 2, HEIGHT // 2 + 100))

    pygame.display.flip()

    return restart_button.get_rect(topleft=(WIDTH // 2 - restart_button.get_width() // 2, HEIGHT // 2 + 50)), \
           menu_button.get_rect(topleft=(WIDTH // 2 - menu_button.get_width() // 2, HEIGHT // 2 + 100))

# Función para mostrar la pantalla de Juego Terminado
def show_game_finished():
    screen.fill(BLACK)
    font = pygame.font.Font(None, 74)
    finished_text = font.render("¡Juego Terminado!", True, GREEN)
    screen.blit(finished_text,
                (WIDTH // 2 - finished_text.get_width() // 2, HEIGHT // 2 - finished_text.get_height() // 2))
    pygame.display.flip()
    pygame.time.wait(3000)  # Esperar 3 segundos

# Bucle principal del juego
running = True
game_active = False

while running:
    if not game_active:
        play_rect, options_rect, exit_rect = show_main_menu()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = event.pos
                if play_rect.collidepoint(mouse_pos):
                    # Selección de dificultad
                    easy_rect, hard_rect = show_difficulty_selection()
                    while True:
                        for event in pygame.event.get():
                            if event.type == pygame.QUIT:
                                running = False
                            if event.type == pygame.MOUSEBUTTONDOWN:
                                mouse_pos = event.pos
                                if easy_rect.collidepoint(mouse_pos):
                                    difficulty = 'easy'
                                    break
                                elif hard_rect.collidepoint(mouse_pos):
                                    difficulty = 'hard'
                                    break
                        else:
                            continue
                        break

                    # Selección de niveles
                    level1_rect, level2_rect, level3_rect = show_level_selection()
                    while True:
                        for event in pygame.event.get():
                            if event.type == pygame.QUIT:
                                running = False
                            if event.type == pygame.MOUSEBUTTONDOWN:
                                mouse_pos = event.pos
                                if level1_rect.collidepoint(mouse_pos):
                                    level = 1
                                    break
                                elif level2_rect.collidepoint(mouse_pos):
                                    level = 2
                                    break
                                elif level3_rect.collidepoint(mouse_pos):
                                    level = 3
                                    break
                        else:
                            continue
                        break

                    # Iniciar el juego
                    game_active = True
                    player.health = 100  # Restablecer salud
                    start_ticks = pygame.time.get_ticks()  # Reiniciar temporizador
                    tires.empty()  # Limpiar llantas
                    create_tires(difficulty)  # Crear llantas nuevas

                elif options_rect.collidepoint(mouse_pos):
                    back_rect = show_options()
                    while True:
                        for event in pygame.event.get():
                            if event.type == pygame.QUIT:
                                running = False
                            if event.type == pygame.MOUSEBUTTONDOWN:
                                mouse_pos = event.pos
                                if back_rect.collidepoint(mouse_pos):
                                    break  # Volver a la pantalla principal
                        screen.fill(BLACK)
                        pygame.display.flip()
                elif exit_rect.collidepoint(mouse_pos):
                    running = False

    else:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Actualizar sprites
        player.update()
        tires.update()

        # Generar gotas de agua
        if random.randint(1, 30) == 1:  # Cambia la frecuencia de generación según necesites
            water_drop = WaterDrop()
            water_drops.add(water_drop)

        water_drops.update()

        # Detectar colisiones con llantas
        tire_hits = pygame.sprite.spritecollide(player, tires, False)
        if tire_hits:
            player.health -= 10  # Reducir salud al chocar con una llanta
            for tire in tire_hits:
                tire.rect.y = random.randint(-100, -30)  # Reposicionar la llanta

            # Si la salud llega a cero, termina el juego
            if player.health <= 0:
                restart_rect, menu_rect = show_game_over()
                while True:
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            running = False
                        if event.type == pygame.MOUSEBUTTONDOWN:
                            mouse_pos = event.pos
                            if restart_rect.collidepoint(mouse_pos):
                                # Reiniciar el juego
                                game_active = True
                                player.health = 100  # Restablecer salud
                                start_ticks = pygame.time.get_ticks()  # Reiniciar temporizador
                                tires.empty()  # Limpiar llantas
                                create_tires(difficulty)  # Crear llantas nuevas
                                break
                            elif menu_rect.collidepoint(mouse_pos):
                                game_active = False
                                break
                    else:
                        continue
                    break

        # Detectar colisiones con gotas de agua
        water_hits = pygame.sprite.spritecollide(player, water_drops, True)
        if water_hits:
            player.health = min(player.health + 5, 100)  # Aumentar salud al recoger una gota, máximo 100

        # Controlar el tiempo
        seconds = (pygame.time.get_ticks() - start_ticks) / 1000  # Tiempo en segundos
        if seconds > time_limit:
            show_game_finished()
            game_active = False

        # Dibujar todo
        if level == 1:
            screen.blit(background_image, (0, 0))  # Dibujar el fondo solo en el nivel 1
        tires.draw(screen)
        water_drops.draw(screen)  # Dibujar las gotas de agua
        screen.blit(player.image, player.rect)

        # Dibujar la barra de vida
        draw_health_bar(screen, 50, 50, player.health, 100)

        # Mostrar el tiempo restante
        timer_text = pygame.font.Font(None, 36).render(f'Tiempo: {int(time_limit - seconds)}', True, WHITE)
        screen.blit(timer_text, (WIDTH - 150, 50))

        # Actualizar pantalla
        pygame.display.flip()
        clock.tick(60)

pygame.quit()
sys.exit()
